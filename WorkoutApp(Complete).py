{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "c7ab8052-633c-4846-a4b8-eac57a6c3467",
   "metadata": {},
   "outputs": [],
   "source": [
    "import tkinter as tk\n",
    "from tkinter import ttk, messagebox, filedialog\n",
    "import json\n",
    "\n",
    "# Helper function to calculate BMI and return category\n",
    "def calculate_bmi(weight_kg, height_cm):\n",
    "    height_m = height_cm / 100.0\n",
    "    bmi = weight_kg / (height_m ** 2)\n",
    "    bmi = round(bmi, 2)\n",
    "    if bmi < 18.5:\n",
    "        category = \"Underweight\"\n",
    "    elif 18.5 <= bmi < 24.9:\n",
    "        category = \"Normal weight\"\n",
    "    elif 25 <= bmi < 29.9:\n",
    "        category = \"Overweight\"\n",
    "    else:\n",
    "        category = \"Obesity\"\n",
    "    return bmi, category\n",
    "\n",
    "# UserInfo, WorkoutPlanner, DietTips classes unchanged from your snippet\n",
    "class UserInfo:\n",
    "    def __init__(self):\n",
    "        self.height = None\n",
    "        self.weight = None\n",
    "        self.gender = None\n",
    "        self.eating_habits = None\n",
    "        self.weight_goal = None\n",
    "        self.body_type = None\n",
    "        self.body_type_image = None\n",
    "        self.workout_days = None\n",
    "        self.workout_time = None\n",
    "        self.food_allergies = None\n",
    "        self.sicknesses = None\n",
    "        self.fitness_level = None\n",
    "        self.fitness_goal = None\n",
    "\n",
    "class WorkoutPlanner:\n",
    "    def __init__(self, user_info):\n",
    "        self.user_info = user_info\n",
    "        self.workout_plans = {\n",
    "            \"Beginner\": {\n",
    "                \"Lose Weight\": {\n",
    "                    \"Push Day\": [\n",
    "                        \"Bench Press: 3 sets of 10 reps (moderate weight, short rest)\",\n",
    "                        \"Overhead Shoulder Press: 3 sets of 12 reps\",\n",
    "                        \"Incline Dumbbell Press: 2 sets of 12 reps\",\n",
    "                        \"Push-Ups: 2 sets of 15 reps\",\n",
    "                        \"20 min brisk walking or cycling (cardio finisher)\"\n",
    "                    ],\n",
    "                    \"Pull Day\": [\n",
    "                        \"Assisted Pull-Ups: 3 sets of 8 reps\",\n",
    "                        \"Barbell Rows: 3 sets of 10 reps\",\n",
    "                        \"Face Pulls: 2 sets of 15 reps\",\n",
    "                        \"Dumbbell Bicep Curls: 2 sets of 12 reps\",\n",
    "                        \"15 min jump rope or rowing (cardio finisher)\"\n",
    "                    ],\n",
    "                    \"Leg Day\": [\n",
    "                        \"Goblet Squats: 3 sets of 12 reps\",\n",
    "                        \"Romanian Deadlifts: 2 sets of 12 reps\",\n",
    "                        \"Walking Lunges: 2 sets of 10 reps per leg\",\n",
    "                        \"Calf Raises: 2 sets of 20 reps\",\n",
    "                        \"20 min jogging or HIIT (cardio finisher)\"\n",
    "                    ]\n",
    "                },\n",
    "                \"Build Muscles\": {\n",
    "                    \"Push Day\": [\n",
    "                        \"Bench Press: 3 sets of 8-10 reps (focus on progressive overload)\",\n",
    "                        \"Overhead Shoulder Press: 3 sets of 10 reps\",\n",
    "                        \"Tricep Dips (Assisted if needed): 2 sets of 8-10 reps\",\n",
    "                        \"Incline Dumbbell Press: 2 sets of 10 reps\",\n",
    "                        \"Push-Ups: 2 sets of 8-12 reps\"\n",
    "                    ],\n",
    "                    \"Pull Day\": [\n",
    "                        \"Pull-Ups (Assisted if needed): 3 sets of 8 reps\",\n",
    "                        \"Barbell Rows: 3 sets of 10 reps\",\n",
    "                        \"Face Pulls: 2 sets of 12 reps\",\n",
    "                        \"Dumbbell Bicep Curls: 2 sets of 10-12 reps\",\n",
    "                        \"Seated Cable Rows: 3 sets of 10 reps\"\n",
    "                    ],\n",
    "                    \"Leg Day\": [\n",
    "                        \"Goblet Squats: 3 sets of 10 reps\",\n",
    "                        \"Romanian Deadlifts (RDL): 2 sets of 10 reps\",\n",
    "                        \"Walking Lunges: 2 sets of 8 reps per leg\",\n",
    "                        \"Calf Raises: 2 sets of 15 reps\",\n",
    "                        \"Leg Extensions (Machine): 2 sets of 12 reps\"\n",
    "                    ]\n",
    "                }\n",
    "            },\n",
    "            \"Intermediate\": {\n",
    "                \"Lose Weight\": {\n",
    "                    \"Push Day\": [\n",
    "                        \"Bench Press: 4 sets of 10 reps\",\n",
    "                        \"Overhead Shoulder Press: 4 sets of 12 reps\",\n",
    "                        \"Incline Dumbbell Press: 3 sets of 12 reps\",\n",
    "                        \"Lateral Raises: 3 sets of 15 reps\",\n",
    "                        \"20-30 min interval cardio\"\n",
    "                    ],\n",
    "                    \"Pull Day\": [\n",
    "                        \"Pull-Ups: 4 sets of 8 reps\",\n",
    "                        \"Barbell Rows: 4 sets of 10 reps\",\n",
    "                        \"One-Arm Dumbbell Rows: 3 sets of 12 reps\",\n",
    "                        \"Face Pulls: 3 sets of 15 reps\",\n",
    "                        \"20 min HIIT on rowing machine\"\n",
    "                    ],\n",
    "                    \"Leg Day\": [\n",
    "                        \"Squats: 4 sets of 10 reps\",\n",
    "                        \"Romanian Deadlifts: 4 sets of 12 reps\",\n",
    "                        \"Walking Lunges: 3 sets of 12 reps per leg\",\n",
    "                        \"Calf Raises: 4 sets of 20 reps\",\n",
    "                        \"25 min incline treadmill walk\"\n",
    "                    ]\n",
    "                },\n",
    "                \"Build Muscles\": {\n",
    "                    \"Push Day\": [\n",
    "                        \"Bench Press: 4 sets of 8-12 reps\",\n",
    "                        \"Overhead Shoulder Press: 4 sets of 8-10 reps\",\n",
    "                        \"Incline Dumbbell Press: 3 sets of 10-12 reps\",\n",
    "                        \"Tricep Dips: 3 sets of 10-12 reps\",\n",
    "                        \"Lateral Raises: 3 sets of 12-15 reps\",\n",
    "                        \"Cable Pushdowns: 3 sets of 12 reps\"\n",
    "                    ],\n",
    "                    \"Pull Day\": [\n",
    "                        \"Pull-Ups: 4 sets of 8-10 reps\",\n",
    "                        \"Barbell Rows: 4 sets of 8 reps\",\n",
    "                        \"One-Arm Dumbbell Rows: 3 sets of 10 reps per arm\",\n",
    "                        \"Face Pulls: 3 sets of 12-15 reps\",\n",
    "                        \"Barbell or Dumbbell Bicep Curls: 3 sets of 10-12 reps\",\n",
    "                        \"Hammer Curls: 3 sets of 12 reps\"\n",
    "                    ],\n",
    "                    \"Leg Day\": [\n",
    "                        \"Squats (Barbell or Dumbbell): 4 sets of 8-12 reps\",\n",
    "                        \"Romanian Deadlifts: 4 sets of 10-12 reps\",\n",
    "                        \"Walking Lunges: 3 sets of 12 reps per leg\",\n",
    "                        \"Leg Press: 3 sets of 10-12 reps\",\n",
    "                        \"Calf Raises: 4 sets of 15-20 reps\",\n",
    "                        \"Bulgarian Split Squats: 3 sets of 10 reps per leg\"\n",
    "                    ]\n",
    "                }\n",
    "            },\n",
    "            \"Advanced\": {\n",
    "                \"Lose Weight\": {\n",
    "                    \"Push Day\": [\n",
    "                        \"Bench Press: 5 sets of 8 reps\",\n",
    "                        \"Incline Dumbbell Press: 4 sets of 10 reps\",\n",
    "                        \"Overhead Shoulder Press: 4 sets of 8 reps\",\n",
    "                        \"Lateral Raises: 4 sets of 15 reps\",\n",
    "                        \"30 min HIIT or cross-training\"\n",
    "                    ],\n",
    "                    \"Pull Day\": [\n",
    "                        \"Weighted Pull-Ups: 5 sets of 6 reps\",\n",
    "                        \"Barbell Rows: 5 sets of 8 reps\",\n",
    "                        \"T-Bar Rows: 4 sets of 10 reps\",\n",
    "                        \"Face Pulls: 4 sets of 15 reps\",\n",
    "                        \"25 min running or rowing\"\n",
    "                    ],\n",
    "                    \"Leg Day\": [\n",
    "                        \"Barbell Back Squats: 5 sets of 8 reps\",\n",
    "                        \"Romanian Deadlifts: 5 sets of 10 reps\",\n",
    "                        \"Walking Lunges: 4 sets of 12 reps per leg\",\n",
    "                        \"Leg Press: 4 sets of 12 reps\",\n",
    "                        \"30 min incline treadmill walk\"\n",
    "                    ]\n",
    "                },\n",
    "                \"Build Muscles\": {\n",
    "                    \"Push Day\": [\n",
    "                        \"Bench Press (Heavy): 5 sets of 6-8 reps\",\n",
    "                        \"Incline Dumbbell Press: 4 sets of 8-10 reps\",\n",
    "                        \"Overhead Shoulder Press (Standing): 4 sets of 6-8 reps\",\n",
    "                        \"Lateral Raises with Tempo Control: 4 sets of 12-15 reps\",\n",
    "                        \"Tricep Dips (Weighted): 4 sets of 8-10 reps\",\n",
    "                        \"Cable Flys: 3 sets of 12-15 reps\"\n",
    "                    ],\n",
    "                    \"Pull Day\": [\n",
    "                        \"Weighted Pull-Ups: 5 sets of 6-8 reps\",\n",
    "                        \"Barbell Rows: 5 sets of 8-10 reps\",\n",
    "                        \"T-Bar Rows: 4 sets of 8-12 reps\",\n",
    "                        \"Face Pulls with Rope: 4 sets of 12-15 reps\",\n",
    "                        \"Preacher Curls (Barbell or Dumbbell): 4 sets of 10-12 reps\",\n",
    "                        \"Hammer Curls: 4 sets of 12-15 reps\",\n",
    "                        \"Deadlifts: 4 sets of 6 reps\"\n",
    "                    ],\n",
    "                    \"Leg Day\": [\n",
    "                        \"Barbell Back Squats (Heavy): 5 sets of 6-8 reps\",\n",
    "                        \"Romanian Deadlifts (RDL): 5 sets of 8-10 reps\",\n",
    "                        \"Walking Lunges (Weighted): 4 sets of 12-15 reps per leg\",\n",
    "                        \"Leg Press (High Volume): 4 sets of 10-12 reps\",\n",
    "                        \"Calf Raises (Superset with Drop Sets): 5 sets of 20 reps\",\n",
    "                        \"Bulgarian Split Squats (Weighted): 4 sets of 8 reps per leg\"\n",
    "                    ]\n",
    "                }\n",
    "            }\n",
    "        }\n",
    "        self.additional_tips = {\n",
    "            \"Beginner\": [\n",
    "                \"Start with lighter weights to focus on form.\",\n",
    "                \"Rest for 60-90 seconds between sets.\",\n",
    "                \"Consistency is key – aim to complete all scheduled workouts.\",\n",
    "                \"Hydrate well before, during, and after your workout.\"\n",
    "            ],\n",
    "            \"Intermediate\": [\n",
    "                \"Focus on progressive overload – increase weights each week.\",\n",
    "                \"Incorporate compound movements for maximum muscle engagement.\",\n",
    "                \"Maintain proper form to avoid injuries while lifting heavier.\",\n",
    "                \"Add mobility exercises to improve range of motion.\"\n",
    "            ],\n",
    "            \"Advanced\": [\n",
    "                \"Utilize advanced techniques like drop sets and supersets.\",\n",
    "                \"Increase workout intensity by reducing rest times.\",\n",
    "                \"Periodize your training for continued progress.\",\n",
    "                \"Incorporate recovery methods like foam rolling and stretching.\"\n",
    "            ]\n",
    "        }\n",
    "\n",
    "    def generate_workout_plan(self):\n",
    "        fitness_level = self.user_info.fitness_level\n",
    "        fitness_goal = self.user_info.fitness_goal or \"Build Muscles\"\n",
    "        plan = f\"Workout Plan for {fitness_level} Level ({fitness_goal}):\\n\"\n",
    "        if (\n",
    "            fitness_level in self.workout_plans and\n",
    "            fitness_goal in self.workout_plans[fitness_level]\n",
    "        ):\n",
    "            for day, exercises in self.workout_plans[fitness_level][fitness_goal].items():\n",
    "                plan += f\"\\n{day}:\\n\"\n",
    "                for exercise in exercises:\n",
    "                    plan += f\"- {exercise}\\n\"\n",
    "            plan += \"\\nAdditional Tips:\\n\"\n",
    "            for tip in self.additional_tips[fitness_level]:\n",
    "                plan += f\"- {tip}\\n\"\n",
    "        else:\n",
    "            plan += \"General fitness exercises.\\n\"\n",
    "        if self.user_info.sicknesses:\n",
    "            plan += \"\\nNote: Adjust workout intensity as per doctor's advice.\\n\"\n",
    "        return plan\n",
    "\n",
    "class DietTips:\n",
    "    def __init__(self, user_info):\n",
    "        self.user_info = user_info\n",
    "\n",
    "    def generate_tips(self, tips_type):\n",
    "        tips = []\n",
    "        if tips_type == \"Simple Tips\":\n",
    "            tips = [\n",
    "                \"Drink at least 2 liters of water daily.\",\n",
    "                \"Include a source of protein in every meal.\",\n",
    "                \"Avoid processed foods and sugary drinks.\",\n",
    "                \"Opt for whole grains instead of refined carbs.\"\n",
    "            ]\n",
    "        elif tips_type == \"Detailed Daily Tips\":\n",
    "            tips = [\n",
    "                \"Day 1: Start with oatmeal and fruits. Lunch: Grilled chicken salad. Dinner: Steamed vegetables.\",\n",
    "                \"Day 2: Breakfast: Smoothie with protein powder. Lunch: Tuna sandwich. Dinner: Grilled salmon and quinoa.\",\n",
    "                \"Day 3: Breakfast: Eggs and avocado toast. Lunch: Stir-fried tofu. Dinner: Lentil soup.\",\n",
    "                \"Day 4: Breakfast: Greek yogurt with nuts. Lunch: Turkey wrap with veggies. Dinner: Baked chicken and sweet potatoes.\"\n",
    "            ]\n",
    "        if self.user_info.food_allergies:\n",
    "            allergy_warning = f\": Avoid foods containing {self.user_info.food_allergies}.\"\n",
    "            tips = [tip + allergy_warning for tip in tips]\n",
    "        return tips\n",
    "\n",
    "# Modified PlannerGUI with Save Workout Plan functionality\n",
    "class PlannerGUI:\n",
    "    def __init__(self, root):\n",
    "        self.root = root\n",
    "        self.root.title(\"Work Hard, Feel Better Workout Planner\")\n",
    "        self.root.configure(bg=\"#f2f2f2\")\n",
    "        self.user_info = UserInfo()\n",
    "        self.generated_plan_data = None  # To store the generated plan for saving\n",
    "\n",
    "        self.body_type_images = {\n",
    "            \"Slim\": \"./slim.png\",\n",
    "            \"Shredded\": \"./shredded.png\",\n",
    "            \"Muscular\": \"./muscular.png\"\n",
    "        }\n",
    "\n",
    "        self.create_welcome_message()\n",
    "        self.create_user_info_section()\n",
    "        self.create_bmi_section()\n",
    "        self.create_body_type_section()\n",
    "        self.create_workout_preferences_section()\n",
    "        self.create_health_section()\n",
    "        self.create_fitness_level_section()\n",
    "        self.create_tips_section()\n",
    "        self.create_submit_button()\n",
    "        self.create_save_button()   # Add Save button\n",
    "\n",
    "    def create_welcome_message(self):\n",
    "        tk.Label(\n",
    "            self.root,\n",
    "            text=\"Welcome to 'Work Hard, Feel Better' Workout Planner\",\n",
    "            font=(\"Arial\", 16, \"bold\"),\n",
    "            bg=\"#f2f2f2\"\n",
    "        ).pack(pady=10)\n",
    "\n",
    "    def create_user_info_section(self):\n",
    "        self.user_info_frame = ttk.LabelFrame(self.root, text=\"User Information\", padding=\"10\")\n",
    "        self.user_info_frame.pack(pady=10)\n",
    "\n",
    "        tk.Label(self.user_info_frame, text=\"Height (cm):\").grid(row=0, column=0, sticky=\"e\", pady=5)\n",
    "        self.height_entry = ttk.Entry(self.user_info_frame)\n",
    "        self.height_entry.grid(row=0, column=1, pady=5)\n",
    "\n",
    "        tk.Label(self.user_info_frame, text=\"Weight (kg):\").grid(row=1, column=0, sticky=\"e\", pady=5)\n",
    "        self.weight_entry = ttk.Entry(self.user_info_frame)\n",
    "        self.weight_entry.grid(row=1, column=1, pady=5)\n",
    "\n",
    "        tk.Label(self.user_info_frame, text=\"Gender:\").grid(row=2, column=0, sticky=\"e\", pady=5)\n",
    "        self.gender = ttk.Combobox(self.user_info_frame, values=[\"Male\", \"Female\", \"Other\"])\n",
    "        self.gender.grid(row=2, column=1, pady=5)\n",
    "\n",
    "        tk.Label(self.user_info_frame, text=\"Eating Habits:\").grid(row=3, column=0, sticky=\"e\", pady=5)\n",
    "        self.eating_habits = ttk.Combobox(self.user_info_frame, values=[\"Healthy\", \"Moderate\", \"Unhealthy\"])\n",
    "        self.eating_habits.grid(row=3, column=1, pady=5)\n",
    "\n",
    "    # BMI Calculator Section\n",
    "    def create_bmi_section(self):\n",
    "        self.bmi_frame = ttk.LabelFrame(self.root, text=\"BMI Calculator\", padding=\"10\")\n",
    "        self.bmi_frame.pack(pady=10)\n",
    "\n",
    "        ttk.Button(self.bmi_frame, text=\"Calculate BMI\", command=self.calculate_bmi_action).grid(row=0, column=0, padx=5)\n",
    "        self.bmi_result_label = ttk.Label(self.bmi_frame, text=\"(Enter height and weight above, then click)\")\n",
    "        self.bmi_result_label.grid(row=0, column=1, padx=5)\n",
    "\n",
    "    def calculate_bmi_action(self):\n",
    "        try:\n",
    "            weight = float(self.weight_entry.get())\n",
    "            height = float(self.height_entry.get())\n",
    "            bmi, bmi_category = calculate_bmi(weight, height)\n",
    "            msg = f\"Your BMI: {bmi} ({bmi_category})\"\n",
    "            self.bmi_result_label.config(text=msg)\n",
    "        except Exception:\n",
    "            self.bmi_result_label.config(text=\"Please enter valid height/weight.\")\n",
    "\n",
    "    def create_body_type_section(self):\n",
    "        self.body_frame = ttk.LabelFrame(self.root, text=\"Body Type and Goal\", padding=\"10\")\n",
    "        self.body_frame.pack(pady=10)\n",
    "\n",
    "        tk.Label(self.body_frame, text=\"Desired Weight Goal (kg):\").grid(row=0, column=0, sticky=\"e\", pady=5)\n",
    "        self.weight_goal_entry = ttk.Entry(self.body_frame)\n",
    "        self.weight_goal_entry.grid(row=0, column=1, pady=5)\n",
    "\n",
    "        tk.Label(self.body_frame, text=\"Body Type:\").grid(row=1, column=0, sticky=\"e\", pady=5)\n",
    "        self.body_type = ttk.Combobox(self.body_frame, values=[\"Slim\", \"Toned\", \"Muscular\"])\n",
    "        self.body_type.grid(row=1, column=1, pady=5)\n",
    "\n",
    "    def create_workout_preferences_section(self):\n",
    "        self.workout_frame = ttk.LabelFrame(self.root, text=\"Workout Preferences\", padding=\"10\")\n",
    "        self.workout_frame.pack(pady=10)\n",
    "\n",
    "        tk.Label(self.workout_frame, text=\"Workout Days (e.g., Mon, Wed, Fri):\").grid(row=0, column=0, sticky=\"e\", pady=5)\n",
    "        self.workout_days_entry = ttk.Entry(self.workout_frame)\n",
    "        self.workout_days_entry.grid(row=0, column=1, pady=5)\n",
    "\n",
    "        tk.Label(self.workout_frame, text=\"Workout Time (minutes/day):\").grid(row=1, column=0, sticky=\"e\", pady=5)\n",
    "        self.workout_time_entry = ttk.Entry(self.workout_frame)\n",
    "        self.workout_time_entry.grid(row=1, column=1, pady=5)\n",
    "\n",
    "    def create_health_section(self):\n",
    "        self.health_frame = ttk.LabelFrame(self.root, text=\"Health Information\", padding=\"10\")\n",
    "        self.health_frame.pack(pady=10)\n",
    "\n",
    "        tk.Label(self.health_frame, text=\"Food Allergies (comma-separated):\").grid(row=0, column=0, sticky=\"e\", pady=5)\n",
    "        self.food_allergies_entry = ttk.Entry(self.health_frame)\n",
    "        self.food_allergies_entry.grid(row=0, column=1, pady=5)\n",
    "\n",
    "        tk.Label(self.health_frame, text=\"Sicknesses:\").grid(row=1, column=0, sticky=\"e\", pady=5)\n",
    "        self.sicknesses_entry = ttk.Entry(self.health_frame)\n",
    "        self.sicknesses_entry.grid(row=1, column=1, pady=5)\n",
    "\n",
    "    def create_fitness_level_section(self):\n",
    "        self.fitness_level_frame = ttk.LabelFrame(self.root, text=\"Fitness Level\", padding=\"10\")\n",
    "        self.fitness_level_frame.pack(pady=10)\n",
    "\n",
    "        tk.Label(self.fitness_level_frame, text=\"Fitness Level:\").grid(row=0, column=0, sticky=\"e\", pady=5)\n",
    "        self.fitness_level = ttk.Combobox(self.fitness_level_frame, values=[\"Beginner\", \"Intermediate\", \"Advanced\"])\n",
    "        self.fitness_level.grid(row=0, column=1, pady=5)\n",
    "\n",
    "    def create_tips_section(self):\n",
    "        tk.Label(self.root, text=\"Choose Tips Type:\", bg=\"#f2f2f2\").pack(pady=5)\n",
    "        self.tips_choice = ttk.Combobox(self.root, values=[\"Simple Tips\", \"Detailed Daily Tips\"])\n",
    "        self.tips_choice.pack()\n",
    "\n",
    "    def create_submit_button(self):\n",
    "        ttk.Button(self.root, text=\"Generate Plan\", command=self.generate_plan).pack(pady=20)\n",
    "\n",
    "    def create_save_button(self):\n",
    "        self.save_btn = ttk.Button(self.root, text=\"Save Workout Plan\", command=self.save_plan_to_file, state='disabled')\n",
    "        self.save_btn.pack(pady=5)\n",
    "\n",
    "    def generate_plan(self):\n",
    "        try:\n",
    "            self.user_info.height = int(self.height_entry.get())\n",
    "            self.user_info.weight = int(self.weight_entry.get())\n",
    "            self.user_info.gender = self.gender.get()\n",
    "            self.user_info.weight_goal = int(self.weight_goal_entry.get())\n",
    "            self.user_info.eating_habits = self.eating_habits.get()\n",
    "            self.user_info.body_type = self.body_type.get()\n",
    "            self.user_info.workout_days = self.workout_days_entry.get()\n",
    "            self.user_info.workout_time = int(self.workout_time_entry.get())\n",
    "            self.user_info.food_allergies = self.food_allergies_entry.get()\n",
    "            self.user_info.sicknesses = self.sicknesses_entry.get()\n",
    "            self.user_info.fitness_level = self.fitness_level.get()\n",
    "\n",
    "            # Basic validation\n",
    "            if not all([self.user_info.eating_habits, self.user_info.body_type, self.user_info.fitness_level]):\n",
    "                raise ValueError(\"Please fill out all fields!\")\n",
    "\n",
    "            # BMI Calculation\n",
    "            bmi, bmi_category = calculate_bmi(self.user_info.weight, self.user_info.height)\n",
    "            bmi_msg = f\"Your BMI is: {bmi} ({bmi_category})\"\n",
    "\n",
    "            # Use a dropdown for the fitness goal instead of a dialog\n",
    "            goal_win = tk.Toplevel(self.root)\n",
    "            goal_win.title(\"Select Fitness Goal\")\n",
    "            tk.Label(goal_win, text=\"What is your primary fitness goal?\").pack(pady=10)\n",
    "            goal_choice = ttk.Combobox(goal_win, values=[\"Lose Weight\", \"Build Muscles\"])\n",
    "            goal_choice.pack(pady=10)\n",
    "            goal_choice.set(\"Lose Weight\")\n",
    "            def set_goal_and_continue():\n",
    "                fitness_goal = goal_choice.get()\n",
    "                if fitness_goal not in (\"Lose Weight\", \"Build Muscles\"):\n",
    "                    messagebox.showerror(\"Input Error\", \"Please select a valid goal.\")\n",
    "                else:\n",
    "                    self.user_info.fitness_goal = fitness_goal\n",
    "                    goal_win.destroy()\n",
    "                    self._finish_plan(bmi, bmi_category, bmi_msg)\n",
    "            ttk.Button(goal_win, text=\"Continue\", command=set_goal_and_continue).pack(pady=10)\n",
    "        except ValueError as e:\n",
    "            messagebox.showerror(\"Input Error\", str(e))\n",
    "\n",
    "    def _finish_plan(self, bmi, bmi_category, bmi_msg):\n",
    "        workout_planner = WorkoutPlanner(self.user_info)\n",
    "        workout_plan = workout_planner.generate_workout_plan()\n",
    "        diet_tips = DietTips(self.user_info).generate_tips(self.tips_choice.get())\n",
    "\n",
    "        # Save plan data for later saving to a file\n",
    "        self.generated_plan_data = {\n",
    "            \"User Info\": vars(self.user_info),\n",
    "            \"BMI\": {\"value\": bmi, \"category\": bmi_category},\n",
    "            \"Workout Plan\": workout_plan,\n",
    "            \"Diet Tips\": diet_tips\n",
    "        }\n",
    "        self.save_btn.config(state='normal')  # Enable the save button\n",
    "\n",
    "        # Show generated plan (workout, diet, BMI)\n",
    "        messagebox.showinfo(\n",
    "            \"Plan Generated\", \n",
    "            f\"{bmi_msg}\\n\\nYour workout and diet plan have been generated!\\n\\n{workout_plan}\\nDiet Tips:\\n\" + \"\\n\".join(diet_tips)\n",
    "        )\n",
    "\n",
    "    def save_plan_to_file(self):\n",
    "        if self.generated_plan_data is None:\n",
    "            messagebox.showwarning(\"No Plan\", \"Please generate a plan before saving!\")\n",
    "            return\n",
    "        file_path = filedialog.asksaveasfilename(\n",
    "            defaultextension=\".json\",\n",
    "            filetypes=[(\"JSON files\", \"*.json\"), (\"All files\", \"*.*\")],\n",
    "            title=\"Save Workout Plan\"\n",
    "        )\n",
    "        if file_path:\n",
    "            try:\n",
    "                with open(file_path, \"w\") as file:\n",
    "                    json.dump(self.generated_plan_data, file, indent=4)\n",
    "                messagebox.showinfo(\"Saved\", f\"Workout plan saved to {file_path}\")\n",
    "            except Exception as e:\n",
    "                messagebox.showerror(\"Error\", f\"Could not save file:\\n{str(e)}\")\n",
    "\n",
    "if __name__ == \"__main__\":\n",
    "    root = tk.Tk()\n",
    "    app = PlannerGUI(root)\n",
    "    root.mainloop()"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.12.4"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
